var fs = require('fs').promises;

(async function () {
    const data = await getData()
    if (!data) return

    // await fetchToCsvFile(data);
    await fetchToJsonFile(data);
})();

async function fetchToJsonFile(data: string) {
    try {
        await fs.writeFile('.output/data.json', data);
    } catch (error) {
        console.error(error);
    }
}

async function getData() {
    const query =
`
/*
This has been generated by the overpass-turbo wizard.
The original search was:
“amenity=* in thailand”
*/
[out:json][timeout:25];
// fetch area “thailand” to search in
area(id:3602067731)->.searchArea;
// gather results
(
  // query part for: “amenity=*”
  node["amenity"](area.searchArea);
  way["amenity"](area.searchArea);
  relation["amenity"](area.searchArea);
);
// print results
out body;
>;
out skel qt;
`

    try {
        const response = await fetch(
            'https://maps.mail.ru/osm/tools/overpass/api/interpreter?'
            , {
                method: 'POST',
                headers: {
                    'content-type': 'application/json;charset=UTF-8',
                },
                body: query
            })
        const data = await response.text()
        return data
    } catch (error) {
        console.error(error);
    }
}

async function fetchToCsvFile(data: []) {
    await addHeaders();
    data.forEach(async (e: Element) => { await addLine(e); });
}

async function addHeaders() {
    try {
        const csvHeaders = 'street,number,altitiude,longitude,region,name'
        await fs.writeFile('.output/data.csv', csvHeaders);
    } catch (error) {
        console.error(error);
    }
}

async function addLine(e: Element) {
    e.userId = e.userId.toString().replace(/\r?\n|\r/g, " ")
    e.id = e.id.toString().replace(/\r?\n|\r/g, " ")
    e.title = e.title.toString().replace(/\r?\n|\r/g, " ")
    e.body = e.body.toString().replace(/\r?\n|\r/g, " ")

    try {
        const csvLine = `\n${e.userId},${e.id},${e.title},${e.body},${'regionFiller'},${'nameFiller'}`
        await fs.writeFile('.output/data.csv', csvLine, { flag: 'a' });
    } catch (error) {
        console.error(error);
    }
}

interface Element {
    userId: string,
    id: string,
    title: string,
    body: string
}
